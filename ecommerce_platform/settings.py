"""
Django settings for ecommerce_platform project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import environ
from dotenv import load_dotenv
from datetime import timedelta
import dj_database_url
import django_heroku
import redis
from urllib.parse import urlparse

# env_path = Path('.') / '.env'
# load_dotenv(dotenv_path=env_path)
load_dotenv()

SYNNEX_LOCAL_ONLY = False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-1(b**7^_z5ox8#vr5!@g_q80le2h@y-df$1^%3$$_3neq+gbnb')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Replace the hardcoded BASE_URL with:
BASE_URL = os.environ.get('BASE_URL', 'http://localhost:8000')

print("BASE_URL", BASE_URL)
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_q',
    # Third party apps
    'corsheaders',
    'graphene_django',
    'graphql_jwt.refresh_token',
    # Project apps
    'products',
    'vendors',
    'offers',
    'affiliates',
    'store',
    'users',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'ecommerce_platform.middleware.ResponseSizeMiddleware',
]

AUTH_USER_MODEL = 'users.User'

ROOT_URLCONF = 'ecommerce_platform.urls'

GRAPHENE = {
    'SCHEMA': 'ecommerce_platform.schema.schema',
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
}
# print(os.environ)
# Determine Redis configuration based on environment
# Initialize local_redis_password to None
local_redis_password = None

if 'REDISCLOUD_URL' in os.environ:
    # Production settings using Redis Cloud
    print("Using Redis Cloud")
    REDIS_URL = os.environ['REDISCLOUD_URL']
    print(f"REDISCLOUD_URL found: {REDIS_URL}")
    redis_client = redis.from_url(REDIS_URL)

    # Parse the REDISCLOUD_URL
    url = urlparse(REDIS_URL)
    REDIS_HOST = url.hostname
    REDIS_PORT = url.port
    REDIS_DB = url.path[1:]  # Remove the leading '/'
    print(f"Parsed Redis Cloud settings - Host: {REDIS_HOST}, Port: {REDIS_PORT}, DB: {REDIS_DB}")
else:
    # Local development settings
    REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')
    REDIS_PORT = int(os.environ.get('REDIS_PORT', 6379))
    REDIS_DB = int(os.environ.get('REDIS_DB', 0))
    print(f"Using local Redis settings - Host: {REDIS_HOST}, Port: {REDIS_PORT}, DB: {REDIS_DB}")
    # Get local Redis password if it exists
    local_redis_password = os.environ.get('REDIS_PASSWORD', None)
    redis_client_kwargs = {
        'host': REDIS_HOST,
        'port': REDIS_PORT,
        'db': REDIS_DB,
    }
    if local_redis_password:
        redis_client_kwargs['password'] = local_redis_password
        print("Local Redis password found")
    redis_client = redis.Redis(**redis_client_kwargs)
    print(f"Local Redis client initialized with settings: {redis_client_kwargs}")

# Test Redis connection
try:
    redis_client.ping()
    print("Successfully connected to Redis")
except redis.ConnectionError as e:
    print(f"Failed to connect to Redis: {str(e)}")
except Exception as e:
    print(f"Unexpected error connecting to Redis: {str(e)}")

AUTHENTICATION_BACKENDS = [
    "ecommerce_platform.jwt_debug.DebugJSONWebTokenBackend",  # Our debug backend first
    "graphql_jwt.backends.JSONWebTokenBackend",
    "django.contrib.auth.backends.ModelBackend",
]

GRAPHQL_JWT = {
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_EXPIRATION_DELTA': timedelta(minutes=60),
    'JWT_SECRET_KEY': SECRET_KEY,  # Must match your Django SECRET_KEY
    'JWT_ALGORITHM': 'HS256',
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}

CORS_URLS_REGEX = r'^/graphql/.*$'

print("Final Redis settings for Q_CLUSTER:", REDIS_HOST, REDIS_PORT, REDIS_DB)
print(f"Q_CLUSTER Redis password: {'Set' if (url.password if 'REDISCLOUD_URL' in os.environ else local_redis_password) else 'Not set'}")

Q_CLUSTER = {
    'name': 'ecommerce_platform',
    'workers': 4,
    'recycle': 500,
    'timeout': 60,
    'compress': True,
    'save_limit': 250,
    'queue_limit': 500,
    'cpu_affinity': 1,
    'label': 'Django Q',
    'redis': {
        'host': REDIS_HOST,
        'port': REDIS_PORT,
        'db': REDIS_DB,
        'password': url.password if 'REDISCLOUD_URL' in os.environ else local_redis_password,
    },
    'catch_up': False,
    'sync': False,
    'django_redis': False,
}

# Add Q_CLUSTER logging
print("Q_CLUSTER configuration:", Q_CLUSTER)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce_platform.wsgi.application'

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_ORIGINS = [ 
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DATABASE_NAME', 'ecommerce_platform'),
        'USER': os.environ.get('DATABASE_USER', 'postgres'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'postgres'),
        'HOST': os.environ.get('DATABASE_HOST', 'localhost'),
        'PORT': os.environ.get('DATABASE_PORT', '5432'),
    }
}

# Override with DATABASE_URL if set (for Heroku)
if 'DATABASE_URL' in os.environ:
    DATABASES['default'] = dj_database_url.config(conn_max_age=600, ssl_require=True)


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'graphql-debug.log',
            'formatter': 'verbose',
        },
        'affiliate_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'affiliate-tasks.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'ecommerce_platform.graphql': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'graphene_django': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'affiliate_tasks': {
            'handlers': ['console', 'affiliate_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
django_heroku.settings(locals())    

# Google OAuth Settings
GOOGLE_OAUTH_CLIENT_ID = os.getenv('GOOGLE_OAUTH2_CLIENT_ID')
GOOGLE_OAUTH_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET')

# Make sure these are set in production, but allow development without them
if not GOOGLE_OAUTH_CLIENT_ID and not DEBUG:
    raise ValueError("GOOGLE_OAUTH2_CLIENT_ID environment variable is required in production")    