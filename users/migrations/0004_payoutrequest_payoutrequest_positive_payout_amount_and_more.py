# Generated by Django 4.2.7 on 2025-07-25 18:33

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("users", "0003_userprofile_last_payout_at_userprofile_payout_status_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="PayoutRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount requested for payout",
                        max_digits=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("approved", "Approved"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        help_text="Current status of the payout request",
                        max_length=20,
                    ),
                ),
                (
                    "payout_method",
                    models.CharField(
                        choices=[
                            ("stripe_bank", "Stripe Bank Transfer"),
                            ("paypal", "PayPal"),
                            ("check", "Paper Check"),
                            ("other", "Other"),
                        ],
                        help_text="Method for delivering the payout",
                        max_length=20,
                    ),
                ),
                (
                    "recipient_email",
                    models.EmailField(
                        help_text="Email for PayPal or notifications", max_length=254
                    ),
                ),
                (
                    "stripe_connect_account_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe Connect account ID (if using Stripe)",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "paypal_email",
                    models.EmailField(
                        blank=True,
                        help_text="PayPal email (if using PayPal)",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        help_text="Priority level for processing",
                        max_length=10,
                    ),
                ),
                (
                    "requested_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the payout was requested"
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, help_text="When the payout was approved", null=True
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the payout was actually processed",
                        null=True,
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the payout was confirmed completed",
                        null=True,
                    ),
                ),
                (
                    "external_transaction_id",
                    models.CharField(
                        blank=True,
                        help_text="Transaction ID from payment processor (Stripe, PayPal, etc.)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "external_reference",
                    models.CharField(
                        blank=True,
                        help_text="Reference number from payment processor",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "processing_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Fee charged by payment processor",
                        max_digits=10,
                    ),
                ),
                (
                    "net_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Final amount received by user (after fees)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True, help_text="Internal notes for admin team"
                    ),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True, help_text="Reason for rejection (if applicable)"
                    ),
                ),
                (
                    "user_notes",
                    models.TextField(
                        blank=True, help_text="Notes from the user with their request"
                    ),
                ),
                (
                    "retry_count",
                    models.IntegerField(
                        default=0, help_text="Number of processing attempts"
                    ),
                ),
                (
                    "last_error",
                    models.TextField(
                        blank=True, help_text="Last error message if processing failed"
                    ),
                ),
                (
                    "next_retry_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When to retry processing (if failed)",
                        null=True,
                    ),
                ),
                (
                    "max_retries",
                    models.IntegerField(
                        default=3, help_text="Maximum number of retry attempts"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata about the payout request",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Admin user who approved the payout",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_payouts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Admin user who processed the payout",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_payouts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User requesting the payout",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payout_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "wallet_transaction",
                    models.OneToOneField(
                        blank=True,
                        help_text="Associated wallet transaction for this payout",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="payout_request",
                        to="users.wallettransaction",
                    ),
                ),
            ],
            options={
                "ordering": ["-requested_at"],
                "indexes": [
                    models.Index(
                        fields=["status", "requested_at"],
                        name="users_payou_status_91c8ee_idx",
                    ),
                    models.Index(
                        fields=["user", "status"], name="users_payou_user_id_8a851a_idx"
                    ),
                    models.Index(
                        fields=["payout_method", "status"],
                        name="users_payou_payout__1a5d17_idx",
                    ),
                    models.Index(
                        fields=["priority", "requested_at"],
                        name="users_payou_priorit_05620a_idx",
                    ),
                    models.Index(
                        fields=["approved_at"], name="users_payou_approve_422a88_idx"
                    ),
                    models.Index(
                        fields=["processed_at"], name="users_payou_process_aed2a4_idx"
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="payoutrequest",
            constraint=models.CheckConstraint(
                check=models.Q(("amount__gt", 0)), name="positive_payout_amount"
            ),
        ),
        migrations.AddConstraint(
            model_name="payoutrequest",
            constraint=models.CheckConstraint(
                check=models.Q(("processing_fee__gte", 0)),
                name="non_negative_processing_fee",
            ),
        ),
    ]
