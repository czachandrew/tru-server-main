# Generated by Django 4.2.7 on 2025-08-12 15:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("products", "0005_product_is_placeholder"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Quote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("vendor_name", models.CharField(blank=True, max_length=255)),
                ("vendor_company", models.CharField(blank=True, max_length=255)),
                ("quote_number", models.CharField(blank=True, max_length=100)),
                ("quote_date", models.DateField(blank=True, null=True)),
                ("pdf_file", models.FileField(upload_to="quotes/%Y/%m/%d/")),
                ("original_filename", models.CharField(max_length=255)),
                (
                    "subtotal",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "tax",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "shipping",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "total",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("uploading", "Uploading"),
                            ("parsing", "Parsing PDF"),
                            ("matching", "Matching Products"),
                            ("completed", "Completed"),
                            ("error", "Error"),
                        ],
                        default="uploading",
                        max_length=20,
                    ),
                ),
                (
                    "openai_task_id",
                    models.CharField(
                        blank=True,
                        help_text="Task ID for OpenAI processing",
                        max_length=100,
                    ),
                ),
                (
                    "parsing_error",
                    models.TextField(
                        blank=True, help_text="Error message if parsing failed"
                    ),
                ),
                (
                    "raw_openai_response",
                    models.JSONField(
                        blank=True,
                        help_text="Raw response from OpenAI for debugging",
                        null=True,
                    ),
                ),
                (
                    "demo_mode_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Whether demo mode was enabled for this quote",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True, help_text="When processing completed", null=True
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quotes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QuoteItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "line_number",
                    models.IntegerField(
                        blank=True,
                        help_text="Line number from original quote",
                        null=True,
                    ),
                ),
                ("part_number", models.CharField(db_index=True, max_length=200)),
                ("description", models.TextField()),
                ("manufacturer", models.CharField(blank=True, max_length=255)),
                ("quantity", models.IntegerField()),
                ("unit_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "vendor_sku",
                    models.CharField(
                        blank=True,
                        help_text="Vendor's SKU for this item",
                        max_length=100,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes from quote"
                    ),
                ),
                (
                    "is_quote_price",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this is a quote price vs confirmed price",
                    ),
                ),
                (
                    "price_confidence",
                    models.FloatField(
                        default=1.0, help_text="Confidence in extracted price (0.0-1.0)"
                    ),
                ),
                (
                    "extraction_confidence",
                    models.FloatField(
                        default=1.0, help_text="Confidence in data extraction (0.0-1.0)"
                    ),
                ),
                (
                    "raw_extracted_data",
                    models.JSONField(
                        blank=True,
                        help_text="Raw extracted data for debugging",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "quote",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="quotes.quote",
                    ),
                ),
            ],
            options={
                "ordering": ["line_number", "id"],
            },
        ),
        migrations.CreateModel(
            name="ProductMatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(help_text="Match confidence score (0.0-1.0)"),
                ),
                (
                    "is_exact_match",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is considered an exact match",
                    ),
                ),
                (
                    "match_method",
                    models.CharField(
                        choices=[
                            ("exact_part_number", "Exact Part Number"),
                            ("fuzzy_part_number", "Fuzzy Part Number Match"),
                            ("manufacturer_match", "Manufacturer + Description"),
                            ("description_similarity", "Description Similarity"),
                            ("demo_generated", "Demo Generated"),
                            ("manual", "Manual Match"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "price_difference",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Difference between quote price and our price",
                        max_digits=10,
                    ),
                ),
                (
                    "price_difference_percentage",
                    models.FloatField(help_text="Price difference as percentage"),
                ),
                (
                    "is_demo_price",
                    models.BooleanField(
                        default=False, help_text="Whether this uses demo pricing"
                    ),
                ),
                (
                    "demo_generated_product",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the product was created for demo",
                    ),
                ),
                (
                    "match_details",
                    models.JSONField(
                        blank=True,
                        help_text="Additional matching algorithm details",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quote_matches",
                        to="products.product",
                    ),
                ),
                (
                    "quote_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matches",
                        to="quotes.quoteitem",
                    ),
                ),
                (
                    "suggested_product",
                    models.ForeignKey(
                        blank=True,
                        help_text="Alternative product suggestion",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quote_suggestions",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "ordering": ["-confidence", "-is_exact_match"],
            },
        ),
        migrations.CreateModel(
            name="VendorPricing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("vendor_company", models.CharField(db_index=True, max_length=255)),
                ("vendor_name", models.CharField(blank=True, max_length=255)),
                ("quoted_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("quantity", models.IntegerField()),
                ("quote_date", models.DateField()),
                (
                    "is_confirmed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this pricing has been confirmed",
                    ),
                ),
                ("confirmation_date", models.DateField(blank=True, null=True)),
                (
                    "part_number_used",
                    models.CharField(
                        help_text="Part number as it appeared in the quote",
                        max_length=200,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vendor_pricing",
                        to="products.product",
                    ),
                ),
                (
                    "source_quote",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pricing_records",
                        to="quotes.quote",
                    ),
                ),
                (
                    "source_quote_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pricing_records",
                        to="quotes.quoteitem",
                    ),
                ),
            ],
            options={
                "ordering": ["-quote_date", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["product", "vendor_company"],
                        name="quotes_vend_product_90c60a_idx",
                    ),
                    models.Index(
                        fields=["vendor_company", "-quote_date"],
                        name="quotes_vend_vendor__8e5832_idx",
                    ),
                    models.Index(
                        fields=["part_number_used"],
                        name="quotes_vend_part_nu_7fd45a_idx",
                    ),
                    models.Index(
                        fields=["quote_date"], name="quotes_vend_quote_d_03e6cd_idx"
                    ),
                ],
                "unique_together": {("source_quote", "source_quote_item")},
            },
        ),
        migrations.AddIndex(
            model_name="quoteitem",
            index=models.Index(
                fields=["quote", "line_number"], name="quotes_quot_quote_i_2c3c7b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="quoteitem",
            index=models.Index(
                fields=["part_number"], name="quotes_quot_part_nu_e9c98a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="quoteitem",
            index=models.Index(
                fields=["manufacturer", "part_number"],
                name="quotes_quot_manufac_b3028b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="quote",
            index=models.Index(
                fields=["user", "-created_at"], name="quotes_quot_user_id_091021_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="quote",
            index=models.Index(fields=["status"], name="quotes_quot_status_bc6cd2_idx"),
        ),
        migrations.AddIndex(
            model_name="quote",
            index=models.Index(
                fields=["vendor_company"], name="quotes_quot_vendor__56ecd1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productmatch",
            index=models.Index(
                fields=["quote_item", "-confidence"],
                name="quotes_prod_quote_i_809f64_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="productmatch",
            index=models.Index(
                fields=["product"], name="quotes_prod_product_6163b3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productmatch",
            index=models.Index(
                fields=["is_exact_match"], name="quotes_prod_is_exac_c650b0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productmatch",
            index=models.Index(
                fields=["match_method"], name="quotes_prod_match_m_0e6306_idx"
            ),
        ),
    ]
